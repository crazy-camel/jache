#!/usr/bin/env perl
use utf8;
use strict;
use warnings;

use JSON;
use Getopt::Long;
use File::Path qw(make_path remove_tree);
use File::Spec;
use File::Copy;
use File::Find;
use feature ":5.18";

# ----------------------------------------------------------------------
# | Initialization		                                               |
# ----------------------------------------------------------------------
my $dirname   = "dist";
my $cgi  = "true";

my $build = get();


GetOptions ("dist=s" => \$dirname,   
              "cgi=s"   => \$cgi );   # flag

my @dir = ( $dirname);

push @dir, "cgi-bin" if ( $cgi eq 'true' );

my $dist = File::Spec->catdir( @dir );

# ----------------------------------------------------------------------
# | Main				                                               |
# ----------------------------------------------------------------------
 
 foreach my $action ( @{ $build->{'build'} } )
 {
 	print "trying :: ". $action->{'action'} . "\n";
 	given ( $action->{'action'} )
 	{
 		when ( 'clear' ) { clear( $action->{'path'} ) }
 		when ( 'make' ) { make( $action->{'path'} ) }
 		when ( 'merge' ) { print "merging now"};
 	}

 }


# ----------------------------------------------------------------------
# | Actions 			                                               |
# ----------------------------------------------------------------------
sub clear
{ 
	print "\t[clear] clearning directory and children for $_[0]\n";
	remove_tree( $_[0] ) if ( -d $_[0]  );
}

sub make
{
	print "\t[make] making the new directory $_[0]\n";
	make_path( $_[0]  );
}

sub rcopy
{
	if ( -f $_[0] )
	{
		return copy( $_[0], $_[1] );
	}

	find sub { 
		return unless -d;
		my $file = "$File::Find::name";
		
  		print "$File::Find::name\n";
	}, $_[0] ;
}

# ----------------------------------------------------------------------
# | Helpers 			                                               |
# ----------------------------------------------------------------------

sub get
{
	my $content = do { local( @ARGV, $/ ) = 'build.json'; <> };
	my $json = JSON::decode_json ( $content );

	while ($content =~ /(\{\{\s*(.*?)\s*\}\})/g) {
		my $replacement = value($json, $2);
		$content =~ s/$1/$replacement/g;
    }

    return JSON::decode_json( $content );
}

sub value
{
	my ( $dataset, $index ) = @_;
	my @frags = split /\./, $index;
	my $response = $dataset;

	foreach my $key ( @frags )
	{
		$response = $response->{$key} if ( $response->{$key} );
	}
	return $response;
}
